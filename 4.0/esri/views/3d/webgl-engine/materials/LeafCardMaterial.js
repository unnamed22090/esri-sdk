// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See http://js.arcgis.com/4.0/esri/copyright.txt for details.
//>>built
require({cache:{"url:esri/views/3d/webgl-engine/materials/LeafCardMaterial.xml":'\x3c?xml version\x3d"1.0" encoding\x3d"UTF-8"?\x3e\r\n\r\n\x3csnippets\x3e\r\n\r\n\x3csnippet name\x3d"vertexShaderLeafCard"\x3e\r\n\t\x3c![CDATA[\r\n\tuniform mat4 proj;\r\n\tuniform mat4 view;\r\n\tuniform mat4 model;\r\n\tuniform mat4 modelNormal;\r\n\tattribute vec3 $position;\r\n\tattribute vec4 $normal;\r\n\tattribute vec4 $uv0;\r\n\tvarying vec2 vtc;\r\n\tvarying vec3 vnormal;\r\n\tvarying float ambientLeaf;\r\n\r\n\tuniform float trafoScale;\r\n\tvarying vec3 vpos;\r\n\r\n\t// TODO optimize?\r\n\tvec2 rotate(vec2 pos, float angle) {\r\n\t\tfloat c \x3d cos(angle);\r\n\t\tfloat s \x3d sin(angle);\r\n\t\treturn vec2(c * pos.x - s * pos.y, s * pos.x + c * pos.y);\r\n\t}\r\n\r\n\tvoid main(void) {\r\n\r\n\t\tvpos \x3d (model * vec4($position, 1.0)).xyz;\r\n\r\n\t\tvec3 pos \x3d (view * model * vec4($position, 1.0)).xyz;\r\n\t\tvec2 uv01 \x3d floor($uv0.xy);\r\n\t\tvec2 uv \x3d $uv0.xy - uv01;\r\n\r\n   \t\tvec2 up \x3d rotate(vec2(1,0), $uv0.z);\r\n   \t\tvec3 xDir \x3d  vec3(up.x,up.y,0.0);\r\n   \t\tvec3 yDir \x3d  vec3(-up.y,up.x,0.0);\r\n\r\n\t\tpos +\x3d xDir * (uv01.x - .5) * $uv0.w *trafoScale;\r\n\t\tpos +\x3d yDir * (uv01.y - .5) * $uv0.w *trafoScale;;\r\n\t\tvec4 pos4 \x3d proj * vec4(pos, 1.0);\r\n\t\tgl_Position \x3d pos4;\r\n\t\tvtc \x3d uv;\r\n\t\tambientLeaf \x3d normal.w;\r\n\t\tvnormal \x3d normalize((modelNormal * vec4($normal.xyz, 1.0)).xyz);\r\n\t}\r\n]]\x3e\r\n\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"fragmentShaderLeafCard"\x3e\r\n\x3c![CDATA[\r\n\tprecision mediump float;\r\n\r\n\tuniform vec3 camPos;\r\n\r\n\tuniform vec4 lightAmbient;\r\n\tuniform vec4 lightDiffuse;\r\n\tuniform vec4 lightSpecular;\r\n\tuniform vec3 lightDirection;\r\n\r\n\tuniform vec3 ambient;\r\n\tuniform vec3 diffuse;\r\n\tuniform vec3 specular;\r\n\tuniform float shininess;\r\n\r\n\tuniform sampler2D tex;\r\n\tvarying vec2 vtc;\r\n\tvarying vec3 vnormal;\r\n\tvarying float ambientLeaf;\r\n\r\n\tvarying vec3 vpos;\r\n\r\n\tvoid main() {\r\n\t\tvec4 texColor \x3d texture2D(tex, vtc);\r\n\t\tif (texColor.a \x3c .33) discard;\r\n\r\n\t\tvec3 a \x3d ambient * lightAmbient.rgb * lightAmbient.w;\r\n\t\tvec3 d \x3d diffuse * lightDiffuse.rgb * lightDiffuse.w * clamp(dot(vnormal, lightDirection), .0, 1.0);\r\n\r\n\t\tvec3 reflDir \x3d normalize(reflect(vpos - camPos, vnormal));\r\n\t\tfloat specDot \x3d max(dot(reflDir, lightDirection), .001);\r\n\t\tvec3 s \x3d specular * lightSpecular.rgb * lightSpecular.w * pow(specDot, shininess);\r\n\r\n\t\tgl_FragColor \x3d vec4(ambientLeaf * texColor.rgb * (a + d) + s, texColor.a);\r\n\r\n\t\t//gl_FragColor \x3d vec4(ambient,1.0);\r\n\r\n\t}\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\r\n\x3csnippet name\x3d"vertexShaderLeafCardDepth"\x3e\x3c![CDATA[\r\n   \tuniform mat4 proj;\r\n   \tuniform mat4 view;\r\n   \tuniform mat4 model;\r\n   \tuniform vec2 nearFar;\r\n\r\n   \tattribute vec3 $position;\r\n   \tattribute vec4 $uv0;\r\n\r\n   \tuniform float trafoScale;\r\n\r\n   \tvarying vec2 vtc;\r\n   \tvarying float depth;\r\n\r\n   \t// TODO optimize?\r\n   \tvec2 rotate(vec2 pos, float angle) {\r\n   \t\tfloat c \x3d cos(angle);\r\n   \t\tfloat s \x3d sin(angle);\r\n   \t\treturn vec2(c * pos.x - s * pos.y, s * pos.x + c * pos.y);\r\n   \t}\r\n\r\n   \tvoid main(void) {\r\n   \t\tvec3 pos \x3d (view * model * vec4($position, 1.0)).xyz;\r\n   \t\tvec2 uv01 \x3d floor($uv0.xy);\r\n   \t\tvec2 uv \x3d $uv0.xy - uv01;\r\n\r\n   \t\tvec2 up \x3d rotate(vec2(1,0), $uv0.z);\r\n   \t\tvec3 xDir \x3d  vec3(up.x,up.y,0.0);\r\n   \t\tvec3 yDir \x3d  vec3(-up.y,up.x,0.0);\r\n\r\n   \t\tpos +\x3d xDir * (uv01.x - .5) * $uv0.w*trafoScale;\r\n   \t\tpos +\x3d yDir * (uv01.y - .5) * $uv0.w*trafoScale;\r\n   \t\tvec4 pos4 \x3d proj * vec4(pos, 1.0);\r\n   \t\tgl_Position \x3d pos4;\r\n   \t\tvtc \x3d uv;\r\n\r\n   \t\tdepth \x3d (-pos.z - nearFar[0]) / (nearFar[1] - nearFar[0]);\r\n\r\n   \t}\r\n ]]\x3e\x3c/snippet\x3e\r\n\r\n\x3c/snippets\x3e'}});
define("dojo/text!./LeafCardMaterial.xml ./internal/MaterialUtil ../lib/VertexBufferLayout ../lib/GLSLProgram ../lib/GLSLShader ../lib/Util ../lib/gl-matrix ../lib/RenderSlot".split(" "),function(P,z,Q,I,J,M,t,N){var b=t.vec3,H=t.mat4,K=t.mat4d,L=M.VertexAttrConstants;t=function(m,n,p,c,d,e){function r(){return 2*Math.random()-1}z.basicMaterialConstructor(this,e);var A=new Q([L.POSITION,L.NORMAL,L.UV0],[3,4,4]),D=A.getStride();this.getAmbient=function(){return n};this.getDiffuse=function(){return p};
this.getSpecular=function(){return c};this.getShininess=function(){return d};this.dispose=function(){};this.getTextureId=function(){return m};this.getOutputAmount=function(b){var l=0,s;for(s=0;s<b/6;s++)0===s%1&&(l+=6);b=l;for(s=l=0;s<b/6;s++)0===s%1&&(l+=6);return l*D};this.getVertexBufferLayout=function(){return A};this.reduce=function(b,l){for(var s=b.position,m=b.normal,f=b.uv0,a=[],D=[],d=[],r=0,e=0;e<s.length/6;e++)if(0===e%l)for(var c=0;6>c;c++)a[r]=s[6*e+c],D[r]=m[6*e+c],d[r]=f[6*e+c],r++;
return{position:a,normal:D,uv0:d}};this.fillInterleaved=function(m,l,s,d,f,a){d=z.fill;var e=this.reduce(m.faces.indices,1),e=this.reduce(e,1),c=this.getOutputAmount(m.faces.indices.position.length);M.assert(c===e.position.length*D);var n=e.position,A=e.normal,p=e.uv0,e=m.vertexAttr.position.data,E=m.vertexAttr.normal.data,x=m.vertexAttr.uv0.data,v=b.create();m=n.length/6;for(var c=a,y=b.createFrom(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE),u=b.createFrom(Number.MAX_VALUE,Number.MAX_VALUE,
Number.MAX_VALUE),t=0;t<m;++t){for(var g=b.create(),q=b.create(),h=[100,100,-100,-100],w=b.create(),k=0;6>k;++k){var B=6*t+k,F=3*n[B],G=3*A[B],B=2*p[B];g[0]+=e[F+0];g[1]+=e[F+1];g[2]+=e[F+2];q[0]+=E[G+0];q[1]+=E[G+1];q[2]+=E[G+2];G=x[B+0];B=x[B+1];h[0]=Math.min(h[0],G);h[1]=Math.min(h[1],B);h[2]=Math.max(h[2],G);h[3]=Math.max(h[3],B);0===k&&b.set3(e[F+0],e[F+1],e[F+2],w)}g[0]/=6;g[1]/=6;g[2]/=6;q[0]/=6;q[1]/=6;q[2]/=6;g[0]+=0.1*r();g[1]+=0.1*r();g[2]+=0.1*r();void 0!==l&&(K.multiplyVec3(l,w,w),K.multiplyVec3(l,
g,g),K.multiplyVec3(s,q,q));b.add(g,v,v);b.max(y,g,y);b.min(u,g,u);h[0]+=0.01;h[1]+=0.01;h[2]-=0.01;h[3]-=0.01;for(k=0;4>k;k++)h[k]=Math.min(h[k],0.99999);k=2*Math.random()*Math.PI;w=1.41*b.dist(w,g);a+=d(g,0,f,a,void 0,3);a+=d(q,0,f,a,void 0,3);f[a++]=0;f[a++]=h[0];f[a++]=h[1];f[a++]=k;f[a++]=w;a+=d(g,0,f,a,void 0,3);a+=d(q,0,f,a,void 0,3);f[a++]=0;f[a++]=h[2]+1;f[a++]=h[1];f[a++]=k;f[a++]=w;a+=d(g,0,f,a,void 0,3);a+=d(q,0,f,a,void 0,3);f[a++]=0;f[a++]=h[2]+1;f[a++]=h[3]+1;f[a++]=k;f[a++]=w;a+=d(g,
0,f,a,void 0,3);a+=d(q,0,f,a,void 0,3);f[a++]=0;f[a++]=h[2]+1;f[a++]=h[3]+1;f[a++]=k;f[a++]=w;a+=d(g,0,f,a,void 0,3);a+=d(q,0,f,a,void 0,3);f[a++]=0;f[a++]=h[0];f[a++]=h[3]+1;f[a++]=k;f[a++]=w;a+=d(g,0,f,a,void 0,3);a+=d(q,0,f,a,void 0,3);f[a++]=0;f[a++]=h[0];f[a++]=h[1];f[a++]=k;f[a++]=w}v[0]/=m;v[1]/=m;v[2]/=m;l=b.create();b.add(y,u,l);b.scale(l,0.5,l);a=b.create();b.subtract(y,u,a);a[0]=Math.abs(a[0])/2;a[1]=Math.abs(a[1])/2;a[2]=Math.abs(a[2])/2;n=b.create(v);n[1]-=(y[1]-u[1])/3;y=b.create();
u=b.create();e=b.create();A=[b.create(),b.create(),b.create(),b.create()];v=[0,0,0,0];p=H.create();for(t=0;t<m;++t){b.set3(f[c],f[c+1],f[c+2],e);b.subtract(e,n,y);b.normalize(y,y);u=b.subtract(e,l,u);b.normalize(u,u);x=Math.abs(b.dot(u,[1,0,0]));k=Math.abs(b.dot(u,[0,1,0]));E=Math.abs(b.dot(u,[0,0,1]));x=x*Math.abs(l[0]-e[0])/a[0];x+=k*Math.abs(l[1]-e[1])/a[1];x+=E*Math.abs(l[2]-e[2])/a[2];for(k=0;4>k;k++)H.identity(p),H.rotate(p,0.8*r(),[0,1,0],p),H.rotate(p,0.8*r(),[1,0,0],p),H.multiplyVec3(p,y,
A[k]),v[k]=0.5+0.5*x-0.2*r();E=0.8+0.3*r();for(k=0;6>k;++k){var C;switch(k){case 0:C=0;break;case 1:C=1;break;case 2:C=2;break;case 3:C=2;break;case 4:C=3;break;case 5:C=0}c+=3;c+=d(A[C],0,f,c,s,3);f[c++]=v[C];c+=3;f[c++]*=E}}};this.intersect=function(){};this.getGLMaterials=function(){return{color:R,depthShadowMap:S,normal:void 0,depth:O,highlight:void 0}};this.getAllTextureIds=function(){return[m]}};var R=function(b,n,p){z.basicGLMaterialConstructor(this,b);var c=N.TRANSPARENT_MATERIAL,d=n.get("leafCard");
z.singleTextureGLMaterialConstructor(this,p,{textureId:b.getTextureId()});this.beginSlot=function(b){return c===b};this.getProgram=function(){return d};var e=b.getAmbient(),r=b.getDiffuse(),A=b.getSpecular(),D=b.getShininess();this.bind=function(c,l){d.use();this.bindTexture(c,d);d.uniform3fv("ambient",e);d.uniform3fv("diffuse",r);d.uniform3fv("specular",A);d.uniform1f("shininess",D);d.uniform1f("trafoScale",1);b.getVertexBufferLayout().enableVertexAttribArrays(c,d)};this.release=function(e){b.getVertexBufferLayout().disableVertexAttribArrays(e,
d)};this.bindView=function(b,e){z.bindView(e.origin,e.view,d);z.bindCamPos(e.origin,e.viewInvTransp,d)};this.bindInstance=function(e,b){d.uniformMatrix4fv("model",b.transformation);d.uniformMatrix4fv("modelNormal",b.transformationNormal);var c=b.transformation,m=Math.sqrt(c[0]*c[0]+c[4]*c[4]+c[8]*c[8]),f=Math.sqrt(c[1]*c[1]+c[5]*c[5]+c[9]*c[9]),c=Math.sqrt(c[2]*c[2]+c[6]*c[6]+c[10]*c[10]);d.uniform1f("trafoScale",(m+f+c)/3)};this.getDrawMode=function(c){return c.TRIANGLES}},O=function(b,n,p,c){z.basicGLMaterialConstructor(this,
b);var d=N.TRANSPARENT_MATERIAL,e=null==c?n.get("leafCardDepth"):n.get("leafCardDepthShadowMap");z.singleTextureGLMaterialConstructor(this,p,{textureId:b.getTextureId()});this.beginSlot=function(c){return d===c};this.getProgram=function(){return e};this.bind=function(c,d){e.use();this.bindTexture(c,e);e.uniform2fv("nearFar",d.nearFar);b.getVertexBufferLayout().enableVertexAttribArrays(c,e)};this.release=function(c){b.getVertexBufferLayout().disableVertexAttribArrays(c,e)};this.bindView=function(c,
b){z.bindView(b.origin,b.view,e)};this.bindInstance=function(c,b){e.uniformMatrix4fv("model",b.transformation);var d=b.transformation,m=Math.sqrt(d[0]*d[0]+d[4]*d[4]+d[8]*d[8]),l=Math.sqrt(d[1]*d[1]+d[5]*d[5]+d[9]*d[9]),d=Math.sqrt(d[2]*d[2]+d[6]*d[6]+d[10]*d[10]);e.uniform1f("trafoScale",(m+l+d)/3)};this.getDrawMode=function(c){return c.TRIANGLES}},S=function(b,n,p){O.call(this,b,n,p,!0)};t.loadShaders=function(b,n,p,c){b._parse(P);var d=new J(c.VERTEX_SHADER,b.vertexShaderLeafCard,c),e=new J(c.FRAGMENT_SHADER,
b.fragmentShaderLeafCard,c),d=new I([d,e],c);b=new J(c.VERTEX_SHADER,b.vertexShaderLeafCardDepth,c);e=n.get("fsDepthTextured");n=n.get("fsDepthTexturedShadowMap");e=new I([b,e],c);c=new I([b,n],c);p.add("leafCard",d);p.add("leafCardDepth",e);p.add("leafCardDepthShadowMap",c)};return t});