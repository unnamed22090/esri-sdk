// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See http://js.arcgis.com/4.0/esri/copyright.txt for details.
//>>built
require({cache:{"url:esri/views/3d/webgl-engine/materials/RibbonLineMaterial.xml":'\x3c?xml version\x3d"1.0" encoding\x3d"UTF-8"?\x3e\r\n\r\n\x3csnippets\x3e\r\n\r\n\x3csnippet name\x3d"vsRibbonLine"\x3e\x3c![CDATA[\r\n\tuniform mat4 proj;\r\n\tuniform mat4 view;\r\n\tuniform mat4 model;\r\n\r\n\tuniform float extLineWidth;\r\n\tuniform float nearPlane;\r\n\r\n\tattribute vec3 $position;\t\r\n\tattribute vec2 $uv0;\r\n\tvarying vec2 vtc;\r\n\r\n\tattribute vec4 $color;\r\n\tvarying vec4 vColor;\r\n\r\n\tattribute float size;\r\n\r\n#ifndef WALL\r\n\tuniform float miterLimit;\r\n\tattribute vec3 $auxpos1;\r\n\tattribute vec3 $auxpos2;\r\n#endif\r\n\r\n#ifdef SCREENSCALE\r\n\tuniform vec2 screenSize;\r\n\t$toScreenCoords\r\n#define VECTYPE vec2\r\n#define ZEROVEC vec2(0.0, 0.0)\r\n#define PERPENDICULAR(v) vec2(v.y, -v.x);\r\n#define ISOUTSIDE (left.x * right.y - left.y * right.x)*$uv0.y \x3e 0.0\r\n\r\n#else //ifdef SCREENSCALE\r\n\r\n#define VECTYPE vec3\r\n#define ZEROVEC vec3(0.0, 0.0, 0.0)\r\n// these macros are only valid for "strip" type lines:\r\n#define PERPENDICULAR(v) cross(up/*vec3(0.0, 1.0, 0.0)*/, v)\r\n#define ISOUTSIDE dot(cross(left, right), up/*vec3(0.0, 1.0, 0.0)*/)*$uv0.y \x3c 0.0\r\n\r\n#endif //ifdef SCREENSCALE\r\n\r\n\tfloat interp(float ncp, vec4 a, vec4 b) {\r\n\t\treturn (-ncp - a.z) / (b.z - a.z);\r\n\t}\r\n\r\n#ifdef SCREENSCALE\r\n\r\n  void clipAndTransform(inout vec4 pos, inout vec4 prev, inout vec4 next) {\r\n\t\tfloat vnp \x3d nearPlane*0.99;\r\n\r\n\t\t//We have four vertices per point on the line. Start and end vertices \r\n\t\t//are treated differently --\x3e d \x3e 0, d \x3c 0\r\n\t\tfloat d \x3d abs($uv0.y) - 1.1;\r\n\r\n\t\t//current pos behind ncp --\x3e we need to clip\r\n\t\tif(pos.z \x3e -nearPlane) {\t\t\t\r\n\t\t\tif (d \x3c 0.0) {\r\n\t\t\t\t//previous in front of ncp\r\n\t\t\t\tif(prev.z \x3c -nearPlane) {\r\n\t\t\t\t\tpos \x3d mix(prev, pos, interp(vnp, prev, pos));\r\n\t\t\t\t\tnext \x3d pos;\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t  pos \x3d vec4(0, 0, 0, 1);\r\n\t\t\t  }\r\n\t\t\t}\r\n\t\t\t//next in front of ncp\r\n\t\t\tif(d \x3e 0.0) {\r\n\t\t\t\tif(next.z \x3c -nearPlane) {\r\n\t\t\t\t\tpos \x3d mix(pos, next, interp(vnp, pos, next));\r\n\t\t\t\t\tprev \x3d pos;\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\tpos \x3d vec4(0, 0, 0, 1);\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t}\telse { \r\n\t\t\t//current position visible \r\n\t\t\t//previous behind ncp\r\n\t\t\tif (prev.z \x3e -nearPlane) {\t\t\t\t\r\n\t\t\t\tprev \x3d mix(pos, prev, interp(vnp, pos, prev));\t\t\t\t\r\n\t\t\t}\t\t\t\t\t\r\n\t\t\t//next behind ncp\r\n\t\t\tif (next.z \x3e -nearPlane) {\r\n\t\t\t\tnext \x3d mix(next, pos, interp(vnp, next, pos));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpos\x3d proj * pos;\r\n\t\tpos.xy *\x3d screenSize;\r\n\t\tpos /\x3d pos.w;\r\n\r\n\t\tnext \x3d proj * next;\r\n\t\tnext.xy *\x3d screenSize;\r\n\t\tnext /\x3d next.w;\r\n\r\n\t\tprev \x3d proj * prev;\r\n\t\tprev.xy *\x3d screenSize;\r\n\t\tprev /\x3d prev.w;\t\t\r\n  }\r\n\r\n#endif // SCREENSCALE\r\n\r\n\tvoid main(void) {\r\n\r\n\tfloat lineWidth \x3d extLineWidth + $size; \r\n\r\n#ifdef SCREENSCALE\r\n\r\n#if 0\r\n\t\tvec4 pos \x3d toScreenCoords($position.xyz);\r\n\t\tvec2 left \x3d (pos - toScreenCoords($auxpos1)).xy;\r\n\t\tvec2 right \x3d (toScreenCoords($auxpos2) - pos).xy;\r\n#else\r\n\t\tvec4 pos  \x3d view * vec4((model * vec4($position.xyz, 1.0)).xyz, 1.0); \r\n\t\tvec4 prev \x3d view * vec4((model * vec4($auxpos1.xyz, 1.0)).xyz, 1.0); \r\n\t\tvec4 next \x3d view * vec4((model * vec4($auxpos2.xyz, 1.0)).xyz, 1.0); \r\n\r\n\t\tclipAndTransform(pos, prev, next);\r\n\r\n\t\tvec2 left \x3d (pos - prev).xy;\r\n\t\tvec2 right \x3d (next - pos).xy;\r\n#endif\r\n\r\n#else // ifdef SCREENSCALE\r\n\t\tvec4 pos \x3d vec4($position, 1.0);\r\n#ifndef WALL\r\n\t\tvec3 left \x3d $position.xyz - $auxpos1;\r\n\t\tvec3 right \x3d $auxpos2 - $position.xyz;\r\n\t\tvec3 up \x3d normalize($position.xyz);\r\n#endif // ifndef WALL\r\n#endif // ifdef SCREENSCALE\r\n\r\n#ifdef WALL\r\n\t\tfloat displacementLen \x3d lineWidth;\r\n\t\tvec3 displacementDir \x3d normalize($position.xyz);//vec3(0.0, 1.0, 0.0);\r\n#else // ifdef WALL\r\n\r\n\t\tfloat leftLen \x3d length(left);\r\n\t\tleft \x3d (leftLen \x3e 0.001) ? left/leftLen : ZEROVEC;\r\n\r\n\t\tfloat rightLen \x3d length(right);\r\n\t\tright \x3d (rightLen \x3e 0.001) ? right/rightLen : ZEROVEC;\r\n\r\n\t\t// determine if vertex is on the "outside or "inside" of the join\r\n\t\tbool isOutside \x3d ISOUTSIDE;\r\n\r\n\t\t// compute miter join position first\r\n\t\tfloat displacementLen \x3d lineWidth;\r\n\t\tVECTYPE displacementDir \x3d normalize(left + right);\r\n\t\tdisplacementDir \x3d PERPENDICULAR(displacementDir);\r\n\t\tif (leftLen \x3e 0.001 \x26\x26 rightLen \x3e 0.001) {\r\n\t\t\tfloat nDotSeg \x3d dot(displacementDir, left);\r\n\t\t\tdisplacementLen /\x3d length(nDotSeg*left - displacementDir);\r\n\r\n\t\t\t// limit displacement of inner vertices\r\n\t\t\tif (!isOutside)\r\n\t\t\t\tdisplacementLen \x3d min(displacementLen, min(leftLen, rightLen)/abs(nDotSeg));\r\n\t\t}\r\n\r\n\t\tif (isOutside \x26\x26 (displacementLen \x3e miterLimit*lineWidth)) {\r\n\t\t\t// convert to bevel join if miterLimit is exceeded\r\n\t\t\tif (leftLen \x3c 0.001)\r\n\t\t\t    displacementDir \x3d right;\r\n\t\t\telse if (rightLen \x3c 0.001)\r\n\t\t\t\tdisplacementDir \x3d left;\r\n\t\t\telse\r\n\t\t\t\tdisplacementDir \x3d (abs($uv0.y) - 1.1 \x3c 0.0) ? left : right;\r\n\t\t\tdisplacementDir \x3d normalize(displacementDir);\r\n\t\t\tdisplacementDir \x3d PERPENDICULAR(displacementDir);\r\n\t\t\tdisplacementLen \x3d lineWidth;\r\n\t\t}\r\n\r\n#endif // ifdef WALL\r\n\r\n#ifdef SCREENSCALE\r\n\t\tpos.xy +\x3d displacementDir * floor($uv0.y + 0.5) * displacementLen;\r\n\t\tpos.xy /\x3d screenSize;\r\n#else\r\n\t\tpos.xyz +\x3d displacementDir * floor($uv0.y + 0.5) * displacementLen;\r\n\t\tpos \x3d proj * view * model * pos;\r\n#endif\r\n\r\n\t\tvtc \x3d $uv0;\r\n\t\tvColor \x3d $color * 0.003921568627451; // \x3d 1/255\r\n\t\tgl_Position \x3d pos;\r\n\t}\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"fsRibbonLine"\x3e\x3c![CDATA[\r\n\tprecision mediump float;\r\n\r\n\tuniform vec4 eColor;\r\n\tvarying vec4 vColor;\r\n\tvarying vec2 vtc;\r\n\r\n\tvoid main() {\r\n\t\tgl_FragColor \x3d eColor * vColor;\r\n\t\t//gl_FragColor.a \x3d 1;\r\n\t}\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3c/snippets\x3e'}});
define("dojo/_base/lang dojo/text!./RibbonLineMaterial.xml ./internal/MaterialUtil ../lib/VertexBufferLayout ../lib/GLSLProgram ../lib/GLSLShader ../lib/Util ../lib/gl-matrix ../lib/webglConstants ../lib/RenderSlot".split(" "),function(L,M,D,G,E,B,C,u,y,N){var O=[255,255,255,255],P=[0,0,0,0],h=u.vec3d,H=u.vec2d,I=u.mat4d,q=h.create(),r=h.create(),s=h.create(),F=h.create(),z=H.create(),A=H.create(),J=h.create(),K=h.create();u=function(f,u){D.basicMaterialConstructor(this,u);var k=C.VertexAttrConstants;
f=f||{};f.color=f.color||[1,1,1,1];f.width=f.width||0;f.type=f.type||"screen";f.join=f.join||"miter";f.miterLimit="miter"===f.join?f.miterLimit||5:f.miterLimit;var g="wall"===f.type?2:4,c="wall"===f.type?new G([k.POSITION,k.UV0],[3,2]):new G([k.POSITION,k.UV0,k.AUXPOS1,k.AUXPOS2,k.COLOR,k.SIZE],[3,2,3,3,4,1],[y.FLOAT,y.FLOAT,y.FLOAT,y.FLOAT,y.FLOAT,y.FLOAT]);this.canBeMerged=!1;this.getParams=function(){return f};this.getParameterValues=function(){var e={color:f.color,width:f.width,type:f.type,join:f.join,
polygonOffset:f.polygonOffset};"miter"===f.join&&(e.miterLimit=f.miterLimit);return e};this.setParameterValues=function(e){for(var d in e)e.hasOwnProperty(d)&&(C.assert("type"!==d,"RibbonLineMaterial: type cannot be changed after creation"),f[d]=e[d]);this.notifyDirty("matChanged")};this.dispose=function(){};this.getOutputAmount=function(e){return((e/2+1-2)*g+4)*c.getStride()};this.getVertexBufferLayout=function(){return c};this.fillInterleaved=function(e,d,c,m,a,b){c=e.vertexAttr[k.POSITION].data;
m=e.vertexAttr[k.COLOR]?e.vertexAttr[k.COLOR].data:O;var g=e.vertexAttr[k.SIZE]?e.vertexAttr[k.SIZE].data:P;(e=e.faces&&e.faces.indices&&e.faces.indices.position)&&e.length!=2*(c.length/3-1)&&console.warn("RibbonLineMaterial does not support indices");if("wall"===f.type){m=b;g=c.length/3;b=0;e=c[0];for(var l=c[1],p=c[2],n,h,t,q=0;q<g;q++){var r=3*q;n=e;h=l;t=p;e=c[r];l=c[r+1];p=c[r+2];d&&(e=d[0]*e+d[4]*l+d[8]*p+d[12],l=d[1]*e+d[5]*l+d[9]*p+d[13],p=d[2]*e+d[6]*l+d[10]*p+d[14]);b+=Math.sqrt((e-n)*(e-
n)+(l-h)*(l-h)+(p-t)*(p-t));a[m++]=e;a[m++]=l;a[m++]=p;a[m++]=b;a[m++]=-1;a[m++]=e;a[m++]=l;a[m++]=p;a[m++]=b;a[m++]=1}}else{e=c.length/3;l=c[0];p=c[1];n=c[2];h=0;d&&(l=d[0]*l+d[4]*p+d[8]*n+d[12],p=d[1]*l+d[5]*p+d[9]*n+d[13],n=d[2]*l+d[6]*p+d[10]*n+d[14]);t=l;var q=p,r=n,v=c[3],w=c[4],x=c[5];d&&(v=d[0]*v+d[4]*w+d[8]*x+d[12],w=d[1]*v+d[5]*w+d[9]*x+d[13],x=d[2]*v+d[6]*w+d[10]*x+d[14]);for(var s=0;s<e;s++){var u=3*s;s<e-1&&(v=c[u+3],w=c[u+4],x=c[u+5],d&&(v=d[0]*v+d[4]*w+d[8]*x+d[12],w=d[1]*v+d[5]*w+
d[9]*x+d[13],x=d[2]*v+d[6]*w+d[10]*x+d[14]));h+=Math.sqrt((t-l)*(t-l)+(q-p)*(q-p)+(r-n)*(r-n));a[b++]=t;a[b++]=q;a[b++]=r;a[b++]=h;a[b++]=0===s?-1.2:-1;a[b++]=l;a[b++]=p;a[b++]=n;a[b++]=v;a[b++]=w;a[b++]=x;a[b++]=m[0];a[b++]=m[1];a[b++]=m[2];a[b++]=m[3];a[b++]=g[0];a[b++]=t;a[b++]=q;a[b++]=r;a[b++]=h;a[b++]=0===s?1.2:1;a[b++]=l;a[b++]=p;a[b++]=n;a[b++]=v;a[b++]=w;a[b++]=x;a[b++]=m[0];a[b++]=m[1];a[b++]=m[2];a[b++]=m[3];a[b++]=g[0];0<s&&s<e-1&&(a[b++]=t,a[b++]=q,a[b++]=r,a[b++]=h,a[b++]=-1.2,a[b++]=
l,a[b++]=p,a[b++]=n,a[b++]=v,a[b++]=w,a[b++]=x,a[b++]=m[0],a[b++]=m[1],a[b++]=m[2],a[b++]=m[3],a[b++]=g[0],a[b++]=t,a[b++]=q,a[b++]=r,a[b++]=h,a[b++]=1.2,a[b++]=l,a[b++]=p,a[b++]=n,a[b++]=v,a[b++]=w,a[b++]=x,a[b++]=m[0],a[b++]=m[1],a[b++]=m[2],a[b++]=m[3],a[b++]=g[0]);l=t;p=q;n=r;t=v;q=w;r=x}}};this.intersect=function(c,d,g,m,a,b,u,l,p,n,y,t){if(t){d=c.getData().getVertexAttr(k.position).position.data;c=c.getData().getVertexAttr(k.SIZE).size;c=(c&&c.data[0])+f.width;u=Number.MAX_VALUE;for(l=0;l<d.length-
5;l+=3){q[0]=d[l];q[1]=d[l+1];q[2]=d[l+2];I.multiplyVec3(g,q);r[0]=d[l+3];r[1]=d[l+4];r[2]=d[l+5];I.multiplyVec3(g,r);p.projectPoint(q,z);p.projectPoint(r,A);if(0>z[2]&&0<A[2])h.subtract(q,r,s),n=p.frustumPlanes,t=-(h.dot(n[4],q)+n[4][3]),n=t/h.dot(s,n[4]),h.scale(s,n,s),h.add(q,s,q),p.projectPoint(q,z);else if(0<z[2]&&0>A[2])h.subtract(r,q,s),n=p.frustumPlanes,t=-(h.dot(n[4],r)+n[4][3]),n=t/h.dot(s,n[4]),h.scale(s,n,s),h.add(r,s,r),p.projectPoint(r,A);else if(0>z[2]&&0>A[2])continue;n=C.projectVectorVector2D(z,
A,m);n<u&&(u=n,h.set(q,J),h.set(r,K))}u<c/2+4&&(g=C.linelineDistance3D(J,K,a,b),m=Number.MAX_VALUE,g[0]&&(h.subtract(g[2],a,F),m=0.98*h.length(F)/h.dist(a,b)),y(m,F))}};this.getGLMaterials=function(){return{color:Q,depthShadowMap:void 0,normal:void 0,depth:void 0,highlight:void 0}};this.getAllTextureIds=function(){return[]}};var Q=function(f,h){D.basicGLMaterialConstructor(this,f);var k=L.clone(f.getParams());k.miterLimit="miter"===k.join?k.miterLimit:0;delete k.join;var g=h.get("ribbonLine_"+k.type);
this.updateParameters=function(){var c=f.getParams();k.polygonOffset=c.polygonOffset;k.color=c.color;k.width=c.width;k.miterLimit="miter"===c.join?c.miterLimit:0};this.beginSlot=function(c){return c===N.TRANSPARENT_MATERIAL};this.getProgram=function(){return g};this.bind=function(c,e){g.use();g.uniform4fv("eColor",k.color);g.uniform1f("miterLimit",k.miterLimit);g.uniform1f("nearPlane",e.nearFar[0]);"screen"===k.type?(g.uniform2fv("screenSize",[e.viewport[2],e.viewport[3]]),g.uniform1f("extLineWidth",
k.width*e.pixelRatio)):g.uniform1f("extLineWidth",k.width);f.getVertexBufferLayout().enableVertexAttribArrays(c,g);k.polygonOffset&&(c.enable(c.POLYGON_OFFSET_FILL),c.polygonOffset(0,-4));c.enable(c.BLEND);c.web3DDefaultState.cullEnabled&&c.disable(c.CULL_FACE);1>k.color[3]&&c.depthMask(!1)};this.release=function(c){f.getVertexBufferLayout().disableVertexAttribArrays(c,g);k.polygonOffset&&c.disable(c.POLYGON_OFFSET_FILL);c.disable(c.BLEND);c.web3DDefaultState.cullEnabled&&c.enable(c.CULL_FACE);c.depthMask(!0)};
this.bindView=function(c,e){D.bindView(e.origin,e.view,g)};this.bindInstance=function(c,e){g.uniformMatrix4fv("model",e.transformation)};this.getDrawMode=function(c){return c.TRIANGLE_STRIP}};u.loadShaders=function(f,h,k,g){f._parse(M);var c=new B(g.VERTEX_SHADER,f.vsRibbonLine,g,["SCREENSCALE"]),e=new B(g.VERTEX_SHADER,f.vsRibbonLine,g);h=new B(g.VERTEX_SHADER,f.vsRibbonLine,g,["WALL"]);f=new B(g.FRAGMENT_SHADER,f.fsRibbonLine,g);c=new E([c,f],g);e=new E([e,f],g);g=new E([h,f],g);k.add("ribbonLine_screen",
c);k.add("ribbonLine_strip",e);k.add("ribbonLine_wall",g)};return u});