// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See http://js.arcgis.com/4.0/esri/copyright.txt for details.
//>>built
require({cache:{"url:esri/views/3d/webgl-engine/materials/ColorMaterial.xml":'\x3c?xml version\x3d"1.0" encoding\x3d"UTF-8"?\x3e\r\n\r\n\x3csnippets\x3e\r\n\r\n\x3csnippet name\x3d"vertexShaderColorMaterial"\x3e\x3c![CDATA[\r\n\tuniform mat4 proj;\r\n\tuniform mat4 view;\r\n\tuniform mat4 model;\r\n\r\n\tattribute vec3 $position;\r\n\tattribute vec4 $color;\r\n\r\n\tvarying vec4 vColor; \r\n\r\n\tvoid main(void) {\r\n\t\tvColor \x3d $color * 0.003921568627451; // \x3d 1/255;\r\n\t\tgl_Position \x3d proj * view * vec4((model * vec4($position, 1.0)).xyz, 1.0);\r\n\t}\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"fragmentShaderColorMaterial"\x3e\x3c![CDATA[\r\n\tprecision mediump float;\r\n\r\n\tuniform vec4 eColor;\r\n\tvarying vec4 vColor;\r\n\r\n\tvoid main() {\r\n\t\tgl_FragColor \x3d vColor * eColor;\r\n\t}\r\n]]\x3e\x3c/snippet\x3e\r\n\x3c/snippets\x3e'}});
define("dojo/_base/lang dojo/text!./ColorMaterial.xml ./internal/MaterialUtil ../lib/GLSLProgram ../lib/GLSLShader ../lib/RenderSlot ../lib/Util".split(" "),function(m,p,g,q,k,h,e){e=function(a,f){g.basicMaterialConstructor(this,f);a=a||{};a.color=a.color||[1,1,1,1];a.polygonOffset=a.polygonOffset||!1;a.vertexColors=a.vertexColors||!1;var l=g.Layouts.PosColor;this.getParams=function(){return a};this.setColor=function(c){a.color=c;this.notifyDirty("matChanged")};this.getColor=function(){return a.color};
this.setTransparent=function(c){a.transparent=c;this.notifyDirty("matChanged")};this.getTransparent=function(c){return a.transparent};this.dispose=function(){};this.getOutputAmount=function(a){return a*l.getStride()};this.getVertexBufferLayout=function(){return l};this.fillInterleaved=function(a,d,f,b,n,h,e){g.fillInterleaved(a,d,f,b,l,n,h,e)};this.intersect=g.intersectTriangleGeometry;this.getGLMaterials=function(){return{color:r,depthShadowMap:void 0,normal:void 0,depth:void 0,highlight:s}};this.getAllTextureIds=
function(){return[]}};var r=function(a,f,l){g.basicGLMaterialConstructor(this,a);var c=m.clone(a.getParams()),d=f.get("colorMaterial"),e=a.getColor();this.beginSlot=function(b){return b===(1>e[3]?h.TRANSPARENT_MATERIAL:h.OPAQUE_MATERIAL)};this.getProgram=function(){return d};this.updateParameters=function(){c.color=a.getColor();c.transparent=a.getTransparent()};this.bind=function(b,n){d.use();d.uniform4fv("eColor",c.color);a.getVertexBufferLayout().enableVertexAttribArrays(b,d);c.polygonOffset&&(b.enable(b.POLYGON_OFFSET_FILL),
b.polygonOffset(1,1));c.transparent&&b.enable(b.BLEND);b.web3DDefaultState.cullEnabled&&b.disable(b.CULL_FACE)};this.release=function(b){a.getVertexBufferLayout().disableVertexAttribArrays(b,d);c.transparent&&b.disable(b.BLEND);b.web3DDefaultState.cullEnabled&&b.enable(b.CULL_FACE)};this.bindView=function(b,a){g.bindView(a.origin,a.view,d)};this.bindInstance=function(b,a){d.uniformMatrix4fv("model",a.transformation)};this.getDrawMode=function(a){return a.TRIANGLES}},s=function(a,f,e){g.basicGLMaterialConstructor(this,
a);var c=m.clone(a.getParams()),d=f.get("colorMaterial"),k=[1,1,1,1];this.beginSlot=function(a){return a===(1>k[3]?h.TRANSPARENT_MATERIAL:h.OPAQUE_MATERIAL)};this.getProgram=function(){return d};this.updateParameters=function(){c.color=a.getColor();c.transparent=a.getTransparent()};this.bind=function(b,f){d.use();d.uniform4fv("eColor",c.color);a.getVertexBufferLayout().enableVertexAttribArrays(b,d);c.polygonOffset&&(b.enable(b.POLYGON_OFFSET_FILL),b.polygonOffset(1,1));b.web3DDefaultState.cullEnabled&&
b.disable(b.CULL_FACE)};this.release=function(b){a.getVertexBufferLayout().disableVertexAttribArrays(b,d);b.web3DDefaultState.cullEnabled&&b.enable(b.CULL_FACE)};this.bindView=function(a,c){g.bindView(c.origin,c.view,d)};this.bindInstance=function(a,c){d.uniformMatrix4fv("model",c.transformation)};this.getDrawMode=function(a){return a.TRIANGLES}};e.programs=null;e.loadShaders=function(a,f,e,c){a._parse(p);f=new k(c.VERTEX_SHADER,a.vertexShaderColorMaterial,c);a=new k(c.FRAGMENT_SHADER,a.fragmentShaderColorMaterial,
c);c=new q([f,a],c);e.add("colorMaterial",c)};return e});