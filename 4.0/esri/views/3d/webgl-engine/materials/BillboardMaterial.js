// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See http://js.arcgis.com/4.0/esri/copyright.txt for details.
//>>built
require({cache:{"url:esri/views/3d/webgl-engine/materials/BillboardMaterial.xml":'\x3c?xml version\x3d"1.0" encoding\x3d"UTF-8"?\x3e\r\n\r\n\x3csnippets\x3e\r\n\r\n\x3csnippet name\x3d"vertexShaderBillboard"\x3e\x3c![CDATA[\r\n\tuniform mat4 proj;\r\n\tuniform mat4 view;\r\n\tuniform mat4 model;\r\n\tuniform mat4 modelNormal;\r\n\tattribute vec3 $position;\r\n\tattribute vec3 $normal;\r\n\tattribute vec2 $uv0;\r\n\tvarying vec2 vtc;\r\n\tvarying vec3 vnormal;\r\n\tconst float size \x3d 1.05;\r\n\r\n\tvoid main(void) {\r\n\t\tvec3 pos \x3d (view * model * vec4($position, 1.0)).xyz;\r\n\t\tvec2 uv01 \x3d floor($uv0);\r\n\t\tvec2 uv \x3d $uv0 - uv01;\r\n\t\tvec3 zDir \x3d normalize(-pos);\r\n\t\tvec3 xDir \x3d normalize(cross(vec3(.0, 1.0, .0), zDir));\r\n\t\tvec3 yDir \x3d cross(zDir, xDir);\r\n\t\tpos +\x3d xDir * (uv01.x - .5) * size;\r\n\t\tpos +\x3d yDir * (uv01.y - .5) * size;\r\n\t\tvec4 pos4 \x3d proj * vec4(pos, 1.0);\r\n\t\tgl_Position \x3d pos4;\r\n\t\tvtc \x3d uv;\r\n\t\tvnormal \x3d normalize((modelNormal * vec4($normal, 1.0)).xyz);\r\n\t}\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"fragmentShaderBillboard"\x3e\x3c![CDATA[\r\n\tprecision mediump float;\r\n\r\n\tuniform vec4 lightAmbient;\r\n\tuniform vec4 lightDiffuse;\r\n\tuniform vec3 lightDirection;\r\n\tuniform sampler2D tex;\r\n\tvarying vec2 vtc;\r\n\tvarying vec3 vnormal;\r\n\r\n\tvoid main() {\r\n\t\tvec4 texColor \x3d texture2D(tex, vtc);\r\n\t\tif (texColor.a \x3c .15) discard;\r\n\t\tgl_FragColor \x3d texColor;\r\n\t\tgl_FragColor.rgb *\x3d lightAmbient.rgb * lightAmbient.w + lightDiffuse.rgb * lightDiffuse.w * dot(lightDirection, vnormal);\r\n\t}\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"vertexShaderBillboardDepth"\x3e\x3c![CDATA[\r\n\tuniform mat4 proj;\r\n\tuniform mat4 view;\r\n\tuniform mat4 model;\r\n\tuniform vec2 nearFar;\r\n\tattribute vec3 $position;\r\n\tattribute vec2 $uv0;\r\n\tvarying vec2 vtc;\r\n\tvarying float depth;\r\n\tconst float size \x3d 1.05;\r\n\r\n\tvoid main(void) {\r\n\t\tvec3 pos \x3d (view * model * vec4($position, 1.0)).xyz;\r\n\t\tvec2 uv01 \x3d floor($uv0);\r\n\t\tvec2 uv \x3d $uv0 - uv01;\r\n\t\tpos.x +\x3d (uv01.x - .5) * size;\r\n\t\tpos.y +\x3d (uv01.y - .5) * size;\r\n\t\tvec4 eye \x3d vec4(pos, 1.0);\r\n\t\tgl_Position \x3d proj * eye;\r\n\t\tdepth \x3d (-eye.z - nearFar[0]) / (nearFar[1] - nearFar[0]);\r\n\t\tvtc \x3d uv;\r\n\t}\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3c/snippets\x3e'}});
define(["dojo/text!./BillboardMaterial.xml","./internal/MaterialUtil","../lib/GLSLProgram","../lib/GLSLShader","../lib/RenderSlot"],function(w,n,p,r,s){var v=function(c,k){n.basicMaterialConstructor(this,k);var g=n.Layouts.PosNormTex;this.getSize=function(){return 1.05};this.dispose=function(){};this.getTextureId=function(){return c};this.getOutputAmount=function(e){return 6*e*g.getStride()};this.getVertexBufferLayout=function(){return g};this.fillInterleaved=function(e,c,b,f,d,a){f=n.fill;var k=
e.faces.indices.va,g=e.vertexAttr.va.data,m=e.vertexAttr.tc4.data,p=e.vertexAttr.n0.data,r=e.vertexAttr.n1.data,s=e.vertexAttr.n2.data;e=e.vertexAttr.n3.data;for(var t=0;t<k.length;++t){var h=4*k[t],q=3*k[t];a+=f(g,h,d,a,c,3);a+=f(p,q,d,a,b,3);d[a++]=m[h];d[a++]=m[h+1];a+=f(g,h,d,a,c,3);a+=f(r,q,d,a,b,3);d[a++]=m[h+2]+1;d[a++]=m[h+1];a+=f(g,h,d,a,c,3);a+=f(s,q,d,a,b,3);d[a++]=m[h+2]+1;d[a++]=m[h+3]+1;a+=f(g,h,d,a,c,3);a+=f(s,q,d,a,b,3);d[a++]=m[h+2]+1;d[a++]=m[h+3]+1;a+=f(g,h,d,a,c,3);a+=f(e,q,d,
a,b,3);d[a++]=m[h];d[a++]=m[h+3]+1;a+=f(g,h,d,a,c,3);a+=f(p,q,d,a,b,3);d[a++]=m[h];d[a++]=m[h+1]}};this.intersect=function(){};this.getGLMaterials=function(){return{color:x,depthShadowMap:y,normal:void 0,depth:u,highlight:void 0}};this.getAllTextureIds=function(){return[c]}},x=function(c,k,g){n.basicGLMaterialConstructor(this,c);var e=s.TRANSPARENT_MATERIAL,l=k.get("billboard");n.singleTextureGLMaterialConstructor(this,g,{textureId:c.getTextureId()});this.beginSlot=function(b){return e===b};this.getProgram=
function(){return l};this.bind=function(b,f){l.use();this.bindTexture(b,l);c.getVertexBufferLayout().enableVertexAttribArrays(b,l)};this.release=function(b){c.getVertexBufferLayout().disableVertexAttribArrays(b,l)};this.bindView=function(b,f){n.bindView(f.origin,f.view,l)};this.bindInstance=function(b,f){l.uniformMatrix4fv("model",f.transformation);l.uniformMatrix4fv("modelNormal",f.transformationNormal)};this.getDrawMode=function(b){return b.TRIANGLES}},u=function(c,k,g,e){n.basicGLMaterialConstructor(this,
c);var l=s.TRANSPARENT_MATERIAL,b=null==e?k.get("billboardDepth"):k.get("billboardDepthShadowMap");n.singleTextureGLMaterialConstructor(this,g,{textureId:c.getTextureId()});this.beginSlot=function(b){return l===b};this.getProgram=function(){return b};this.bind=function(f,d){b.use();this.bindTexture(f,b);b.uniform2fv("nearFar",d.nearFar);c.getVertexBufferLayout().enableVertexAttribArrays(f,b)};this.release=function(f){c.getVertexBufferLayout().disableVertexAttribArrays(f,b)};this.bindView=function(c,
d){n.bindView(d.origin,d.view,b)};this.bindInstance=function(c,d){b.uniformMatrix4fv("model",d.transformation)};this.getDrawMode=function(b){return b.TRIANGLES}},y=function(c,k,g){u.call(this,c,k,g,!0)};v.loadShaders=function(c,k,g,e){c._parse(w);var l=new r(e.VERTEX_SHADER,c.vertexShaderBillboard,e),b=new r(e.FRAGMENT_SHADER,c.fragmentShaderBillboard,e),l=new p([l,b],e);c=new r(e.VERTEX_SHADER,c.vertexShaderBillboardDepth,e);b=k.get("fsDepthTextured");k=k.get("fsDepthTexturedShadowMap");b=new p([c,
b],e);e=new p([c,k],e);g.add("billboard",l);g.add("billboardDepth",b);g.add("billboardDepthShadowMap",e)};return v});