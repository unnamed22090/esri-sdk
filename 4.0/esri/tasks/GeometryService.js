// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See http://js.arcgis.com/4.0/esri/copyright.txt for details.
//>>built
define("../core/declare ../core/jsonDictionary ../geometry/Extent ../geometry/Multipoint ../geometry/Polyline ../geometry/Polygon ../geometry/support/jsonUtils ../request ./Task dojo/_base/array dojo/_base/lang".split(" "),function(h,r,n,s,p,l,g,e,t,m,d){var q=r({MGRS:"mgrs",USNG:"usng",UTM:"utm",GeoRef:"geo-ref",GARS:"gars",DMS:"dms",DDM:"ddm",DD:"dd"});h=h(t,{declaredClass:"esri.tasks.GeometryService",_encodeGeometries:function(a){var b=[],c,f=a.length;for(c=0;c<f;c++)b.push(a[c].toJSON());return{geometryType:g.getJsonType(a[0]),
geometries:b}},_decodeGeometries:function(a,b,c){var f=g.getGeometryType(b);a=a.geometries;var k=[],e={spatialReference:c.toJSON()},h=d.mixin;m.forEach(a,function(a,b){k[b]=new f(h(a,e))});return k},_toProjectGeometry:function(a){var b=a.spatialReference.toJSON();return a instanceof n?new l({rings:[[[a.xmin,a.ymin],[a.xmin,a.ymax],[a.xmax,a.ymax],[a.xmax,a.ymin],[a.xmin,a.ymin]]],spatialReference:b}):new p({paths:[[].concat(a.points)],spatialReference:b})},_fromProjectedGeometry:function(a,b,c){return"extent"===
b?(a=a.rings[0],new n(a[0][0],a[0][1],a[2][0],a[2][1],c)):new s({points:a.paths[0],spatialReference:c.toJSON()})},project:function(a,b){var c=d.mixin({},this.parsedUrl.query,{f:"json"}),f;a.geometries?(b=a.outSR,f=a.geometries[0],c=d.mixin(c,a.toJSON())):(f=a[0],c=d.mixin(c,{outSR:b.wkid||JSON.stringify(b.toJSON()),inSR:f.spatialReference.wkid||JSON.stringify(f.spatialReference.toJSON()),geometries:JSON.stringify(this._encodeGeometries(a))}));var k=g.getJsonType(f),u=this._decodeGeometries;return e(this.parsedUrl.path+
"/project",{query:c,callbackParamName:"callback"}).then(function(a){return u(a.data,k,b)})},simplify:function(a){var b=a[0].spatialReference,c=d.mixin({},this.parsedUrl.query,{f:"json",sr:b.wkid?b.wkid:JSON.stringify(b.toJSON()),geometries:JSON.stringify(this._encodeGeometries(a))}),f=g.getJsonType(a[0]),k=this._decodeGeometries;return e(this.parsedUrl.path+"/simplify",{query:c,callbackParamName:"callback"}).then(function(a){return k(a.data,f,b)})},convexHull:function(a){var b=a[0].spatialReference;
a=d.mixin({},this.parsedUrl.query,{f:"json",sr:JSON.stringify(b.toJSON()),geometries:JSON.stringify(this._encodeGeometries(a))});return e(this.parsedUrl.path+"/convexHull",{query:a,callbackParamName:"callback"}).then(function(a){return g.fromJSON(a.data.geometry).set("spatialReference",b)})},union:function(a){var b=a[0].spatialReference;a=d.mixin({},this.parsedUrl.query,{f:"json",sr:JSON.stringify(b.toJSON()),geometries:JSON.stringify(this._encodeGeometries(a))});return e(this.parsedUrl.path+"/union",
{query:a,callbackParamName:"callback"}).then(function(a){return g.fromJSON(a.data.geometry).set("spatialReference",b)})},autoComplete:function(a,b){var c=a[0].spatialReference,f=d.mixin({},this.parsedUrl.query,{f:"json",sr:JSON.stringify(c.toJSON()),polygons:JSON.stringify(this._encodeGeometries(a).geometries),polylines:JSON.stringify(this._encodeGeometries(b).geometries)});return e(this.parsedUrl.path+"/autoComplete",{query:f,callbackParamName:"callback"}).then(function(a){return(a.data.geometries||
[]).map(function(a){return new l({spatialReference:c,rings:a.rings})})})},reshape:function(a,b){var c=a.spatialReference,f=d.mixin({},this.parsedUrl.query,{f:"json",sr:JSON.stringify(c.toJSON()),target:JSON.stringify({geometryType:g.getJsonType(a),geometry:a.toJSON()}),reshaper:JSON.stringify(b.toJSON())});return e(this.parsedUrl.path+"/reshape",{query:f,callbackParamName:"callback"}).then(function(a){return g.fromJSON(a.data.geometry).set("spatialReference",c)})},cut:function(a,b){var c=a[0].spatialReference,
f=m.map(a,function(a){return a.toJSON()}),f=d.mixin({},this.parsedUrl.query,{f:"json",sr:JSON.stringify(c.toJSON()),target:JSON.stringify({geometryType:g.getJsonType(a[0]),geometries:f}),cutter:JSON.stringify(b.toJSON())});return e(this.parsedUrl.path+"/cut",{query:f,callbackParamName:"callback"}).then(function(a){a=a.data;return{cutIndexes:a.cutIndexes,geometries:(a.geometries||[]).map(function(a){return g.fromJSON(a).set("spatialReference",c)})}})},intersect:function(a,b){var c=a[0].spatialReference,
f=d.mixin({},this.parsedUrl.query,{f:"json",sr:JSON.stringify(c.toJSON()),geometries:JSON.stringify(this._encodeGeometries(a)),geometry:JSON.stringify({geometryType:g.getJsonType(b),geometry:b.toJSON()})});return e(this.parsedUrl.path+"/intersect",{query:f,callbackParamName:"callback"}).then(function(a){return(a.data.geometries||[]).map(function(a){return g.fromJSON(a).set("spatialReference",c)})})},difference:function(a,b){var c=a[0].spatialReference,f=d.mixin({},this.parsedUrl.query,{f:"json",sr:JSON.stringify(c.toJSON()),
geometries:JSON.stringify(this._encodeGeometries(a)),geometry:JSON.stringify({geometryType:g.getJsonType(b),geometry:b.toJSON()})});return e(this.parsedUrl.path+"/difference",{query:f,callbackParamName:"callback"}).then(function(a){return(a.data.geometries||[]).map(function(a){return g.fromJSON(a).set("spatialReference",c)})})},buffer:function(a){var b=d.mixin({},this.parsedUrl.query,{f:"json"},a.toJSON()),c=a.outSpatialReference||a.geometries[0].spatialReference;return e(this.parsedUrl.path+"/buffer",
{query:b,callbackParamName:"callback"}).then(function(a){return(a.data.geometries||[]).map(function(a){return new l({spatialReference:c,rings:a.rings})})})},areasAndLengths:function(a){a=d.mixin({},this.parsedUrl.query,{f:"json"},a.toJSON());return e(this.parsedUrl.path+"/areasAndLengths",{query:a,callbackParamName:"callback"}).then(function(a){return a.data})},lengths:function(a){a=d.mixin({},this.parsedUrl.query,{f:"json"},a.toJSON());return e(this.parsedUrl.path+"/lengths",{query:a,callbackParamName:"callback"}).then(function(a){return a.data})},
labelPoints:function(a){var b=m.map(a,function(a){return a.toJSON()}),c=a[0].spatialReference;a=d.mixin({},this.parsedUrl.query,{f:"json",sr:c.wkid?c.wkid:JSON.stringify(c.toJSON()),polygons:JSON.stringify(b)});return e(this.parsedUrl.path+"/labelPoints",{query:a,callbackParamName:"callback"}).then(function(a){return(a.data.labelPoints||[]).map(function(a){return g.fromJSON(a).set("spatialReference",c)})})},relation:function(a){a=d.mixin({},this.parsedUrl.query,{f:"json"},a.toJSON());return e(this.parsedUrl.path+
"/relation",{query:a,callbackParamName:"callback"}).then(this._handleRelationResponse)},trimExtend:function(a){var b=d.mixin({},this.parsedUrl.query,{f:"json"},a.toJSON()),c=a.sr;return e(this.parsedUrl.path+"/trimExtend",{query:b,callbackParamName:"callback"}).then(function(a){return(a.data.geometries||[]).map(function(a){return new p({spatialReference:c,paths:a.paths})})})},densify:function(a){var b=d.mixin({},this.parsedUrl.query,{f:"json"},a.toJSON()),c=a.geometries[0].spatialReference;return e(this.parsedUrl.path+
"/densify",{query:b,callbackParamName:"callback"}).then(function(a){return(a.data.geometries||[]).map(function(a){return g.fromJSON(a).set("spatialReference",c)})})},generalize:function(a){var b=d.mixin({},this.parsedUrl.query,{f:"json"},a.toJSON()),c=a.geometries[0].spatialReference;return e(this.parsedUrl.path+"/generalize",{query:b,callbackParamName:"callback"}).then(function(a){return(a.data.geometries||[]).map(function(a){return g.fromJSON(a).set("spatialReference",c)})})},offset:function(a){var b=
d.mixin({},this.parsedUrl.query,{f:"json"},a.toJSON()),c=a.geometries[0].spatialReference;return e(this.parsedUrl.path+"/offset",{query:b,callbackParamName:"callback"}).then(function(a){return(a.data.geometries||[]).map(function(a){return g.fromJSON(a).set("spatialReference",c)})})},distance:function(a){a=d.mixin({},this.parsedUrl.query,{f:"json"},a.toJSON());return e(this.parsedUrl.path+"/distance",{query:a,callbackParamName:"callback"}).then(this._handleDistanceResponse)},toGeoCoordinateString:function(a){var b=
{};d.isObject(a.sr)?b.sr=a.sr.wkid||JSON.stringify(a.sr.toJSON()):b.sr=a.sr;b.coordinates=JSON.stringify(a.coordinates);b.conversionType=q.toJSON(a.conversionType||"mgrs");b.conversionMode=a.conversionMode;b.numOfDigits=a.numOfDigits;b.rounding=a.rounding;b.addSpaces=a.addSpaces;a=d.mixin({},this.parsedUrl.query,{f:"json"},b);return e(this.parsedUrl.path+"/toGeoCoordinateString",{query:a,callbackParamName:"callback"}).then(this._handleToGeoCoordinateResponse)},fromGeoCoordinateString:function(a){var b=
{};d.isObject(a.sr)?b.sr=a.sr.wkid||JSON.stringify(a.sr.toJSON()):b.sr=a.sr;b.strings=JSON.stringify(a.strings);b.conversionType=q.toJSON(a.conversionType||"mgrs");b.conversionMode=a.conversionMode;a=d.mixin({},this.parsedUrl.query,{f:"json"},b);return e(this.parsedUrl.path+"/fromGeoCoordinateString",{query:a,callbackParamName:"callback"}).then(this._handleFromGeoCoordinateResponse)},_handleRelationResponse:function(a){return a.data.relations},_handleDistanceResponse:function(a){return(a=a.data)&&
a.distance},_handleToGeoCoordinateResponse:function(a){return a.data.strings},_handleFromGeoCoordinateResponse:function(a){return a.data.coordinates}});d.mixin(h,{UNIT_METER:9001,UNIT_GERMAN_METER:9031,UNIT_FOOT:9002,UNIT_SURVEY_FOOT:9003,UNIT_CLARKE_FOOT:9005,UNIT_FATHOM:9014,UNIT_NAUTICAL_MILE:9030,UNIT_SURVEY_CHAIN:9033,UNIT_SURVEY_LINK:9034,UNIT_SURVEY_MILE:9035,UNIT_KILOMETER:9036,UNIT_CLARKE_YARD:9037,UNIT_CLARKE_CHAIN:9038,UNIT_CLARKE_LINK:9039,UNIT_SEARS_YARD:9040,UNIT_SEARS_FOOT:9041,UNIT_SEARS_CHAIN:9042,
UNIT_SEARS_LINK:9043,UNIT_BENOIT_1895A_YARD:9050,UNIT_BENOIT_1895A_FOOT:9051,UNIT_BENOIT_1895A_CHAIN:9052,UNIT_BENOIT_1895A_LINK:9053,UNIT_BENOIT_1895B_YARD:9060,UNIT_BENOIT_1895B_FOOT:9061,UNIT_BENOIT_1895B_CHAIN:9062,UNIT_BENOIT_1895B_LINK:9063,UNIT_INDIAN_FOOT:9080,UNIT_INDIAN_1937_FOOT:9081,UNIT_INDIAN_1962_FOOT:9082,UNIT_INDIAN_1975_FOOT:9083,UNIT_INDIAN_YARD:9084,UNIT_INDIAN_1937_YARD:9085,UNIT_INDIAN_1962_YARD:9086,UNIT_INDIAN_1975_YARD:9087,UNIT_FOOT_1865:9070,UNIT_RADIAN:9101,UNIT_DEGREE:9102,
UNIT_ARCMINUTE:9103,UNIT_ARCSECOND:9104,UNIT_GRAD:9105,UNIT_GON:9106,UNIT_MICRORADIAN:9109,UNIT_ARCMINUTE_CENTESIMAL:9112,UNIT_ARCSECOND_CENTESIMAL:9113,UNIT_MIL6400:9114,UNIT_BRITISH_1936_FOOT:9095,UNIT_GOLDCOAST_FOOT:9094,UNIT_INTERNATIONAL_CHAIN:109003,UNIT_INTERNATIONAL_LINK:109004,UNIT_INTERNATIONAL_YARD:109001,UNIT_STATUTE_MILE:9093,UNIT_SURVEY_YARD:109002,UNIT_50KILOMETER_LENGTH:109030,UNIT_150KILOMETER_LENGTH:109031,UNIT_DECIMETER:109005,UNIT_CENTIMETER:109006,UNIT_MILLIMETER:109007,UNIT_INTERNATIONAL_INCH:109008,
UNIT_US_SURVEY_INCH:109009,UNIT_INTERNATIONAL_ROD:109010,UNIT_US_SURVEY_ROD:109011,UNIT_US_NAUTICAL_MILE:109012,UNIT_UK_NAUTICAL_MILE:109013,UNIT_SQUARE_INCHES:"esriSquareInches",UNIT_SQUARE_FEET:"esriSquareFeet",UNIT_SQUARE_YARDS:"esriSquareYards",UNIT_ACRES:"esriAcres",UNIT_SQUARE_MILES:"esriSquareMiles",UNIT_SQUARE_MILLIMETERS:"esriSquareMillimeters",UNIT_SQUARE_CENTIMETERS:"esriSquareCentimeters",UNIT_SQUARE_DECIMETERS:"esriSquareDecimeters",UNIT_SQUARE_METERS:"esriSquareMeters",UNIT_ARES:"esriAres",
UNIT_HECTARES:"esriHectares",UNIT_SQUARE_KILOMETERS:"esriSquareKilometers"});return h});